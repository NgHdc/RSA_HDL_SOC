// main.v (Ho?c tên file ch?a các module thi?t k? c?a b?n)
`timescale 1ns / 1ps

// Defines cho module inverter
`define UPDATING 3'd1
`define CHECK 3'd2
`define HOLDING 3'd3

// Defines cho module mod_exp
`define UPDATE 2'd1
`define HOLD 2'd2


//======================================================================
// Module: mod (Th?c hi?n phép chia l?y d? và th??ng)
//======================================================================
module mod #(
    parameter WIDTH = 19 // Giá tr? m?c ??nh, s? ???c ghi ?è khi instantiate
) (
    input [WIDTH-1:0] a,
    input [WIDTH-1:0] n,
    output [WIDTH-1:0] R, // Remainder (s? d?)
    output [WIDTH-1:0] Q  // Quotient (th??ng s?)
);

    reg [WIDTH-1:0] A_reg;
    reg [WIDTH-1:0] N_reg;
    reg [WIDTH:0] p_temp; // p_temp có ?? r?ng WIDTH+1 bits
    integer i;

    always @(a or n) begin
        A_reg = a;
        N_reg = n;
        p_temp = 0;
        for (i = 0; i < WIDTH; i = i + 1) begin
            if (WIDTH == 0) begin
                // Không làm gì ho?c gán giá tr? m?c ??nh
            end else if (WIDTH == 1) begin
                p_temp = {p_temp[0], A_reg[WIDTH-1]};
                // A_reg[WIDTH-1:1] không t?n t?i
            end else begin // WIDTH >= 2
                p_temp = {p_temp[WIDTH-2:0], A_reg[WIDTH-1]};
                A_reg[WIDTH-1:1] = A_reg[WIDTH-2:0];
            end

            if (N_reg != 0) begin // Tránh chia cho 0
                p_temp = p_temp - N_reg;
                if (p_temp[WIDTH] == 1'b1) begin // Ki?m tra bit d?u (MSB) c?a p_temp [WIDTH:0]
                    A_reg[0] = 1'b0;
                    p_temp = p_temp + N_reg;
                end else begin
                    A_reg[0] = 1'b1;
                end
            end else begin // X? lý tr??ng h?p chia cho 0 (n?u c?n)
                A_reg[0] = 1'bx; // Ho?c m?t giá tr? l?i khác
                // i // ?ã xóa ký t? 'i' gây l?i ? ?ây
            end
        end
    end

    assign R = p_temp[WIDTH-1:0];
    assign Q = A_reg;
endmodule


//======================================================================
// Module: mod_exp (Th?c hi?n phép l?y th?a theo modulo)
//======================================================================
module mod_exp #(
    parameter WIDTH = 32 // Giá tr? m?c ??nh, s? ???c ghi ?è
) (
    input [WIDTH*2-1:0] base,
    input [WIDTH*2-1:0] modulo,
    input [WIDTH*2-1:0] exponent,
    input clk,
    input reset,
    output finish,
    output [WIDTH*2-1:0] result
);

    reg [WIDTH*2-1:0] base_reg, modulo_reg, exponent_reg, result_reg;
    reg [1:0] state; // `UPDATE, `HOLD (2-bit defines)

    wire [WIDTH*2-1:0] result_mul_base = result_reg * base_reg;
    wire [WIDTH*2-1:0] result_next_remainder;
    wire [WIDTH*2-1:0] base_squared = base_reg * base_reg;
    wire [WIDTH*2-1:0] base_next_remainder;
    wire [WIDTH*2-1:0] exponent_next = exponent_reg >> 1;

    wire [WIDTH*2-1:0] q_temp_bsm;
    wire [WIDTH*2-1:0] q_temp_rmbm;

    assign finish = (state == `HOLD);
    assign result = result_reg;

    mod #(
        .WIDTH(WIDTH*2)
    ) base_squared_mod_inst (
        .a(base_squared),
        .n(modulo_reg),
        .R(base_next_remainder),
        .Q(q_temp_bsm)
    );

    mod #(
        .WIDTH(WIDTH*2)
    ) result_mul_base_mod_inst (
        .a(result_mul_base),
        .n(modulo_reg),
        .R(result_next_remainder),
        .Q(q_temp_rmbm)
    );

    always @(posedge clk) begin
        if (reset) begin
            base_reg <= base;
            modulo_reg <= modulo;
            exponent_reg <= exponent;
            result_reg <= {{WIDTH*2-1{1'b0}}, 1'b1};
            state <= `UPDATE;
        end else begin
            case (state)
                `UPDATE: begin
                    if (exponent_reg != {{WIDTH*2{1'b0}}}) begin
                        if (exponent_reg[0]) begin
                            result_reg <= result_next_remainder;
                        end
                        base_reg <= base_next_remainder;
                        exponent_reg <= exponent_next;
                    end else begin
                        state <= `HOLD;
                    end
                end
                `HOLD: begin
                    // Gi? tr?ng thái
                end
            endcase
        end
    end
endmodule


//======================================================================
// Module: inverter (Tìm khóa e và d cho RSA)
//======================================================================
module inverter #(
    parameter WIDTH = 32 // Giá tr? m?c ??nh, s? ???c ghi ?è
) (
    input [WIDTH-1:0] p,
    input [WIDTH-1:0] q,
    input clk,
    input reset,
    output finish,
    output [WIDTH*2-1:0] e,
    output [WIDTH*2-1:0] d
);

    reg [WIDTH*2-1:0] totient_reg, a_reg, b_reg, y_reg, y_prev_reg;
    reg [2:0] state; // `UPDATING, `CHECK, `HOLDING (3-bit defines)
    reg [WIDTH-1:0] e_reg_internal;

    wire [WIDTH*2-1:0] totient_val = (p-1)*(q-1);
    wire [WIDTH*2-1:0] quotient_from_mod, remainder_from_mod;
    wire [WIDTH*2-1:0] y_next_val = y_prev_reg - (quotient_from_mod * y_reg);
    wire [WIDTH-1:0] e_plus_2_val = e_reg_internal + 2;

    assign finish = (state == `HOLDING);
    assign e = {{WIDTH{1'b0}}, e_reg_internal};
    assign d = y_prev_reg; 

    mod #(
        .WIDTH(WIDTH*2)
    ) x_mod_y_inst (
        .a(a_reg),
        .n(b_reg),
        .R(remainder_from_mod),
        .Q(quotient_from_mod)
    );

    always @(posedge clk) begin
        if (reset) begin
            totient_reg <= (p-1)*(q-1); 
            a_reg <= (p-1)*(q-1);       
            b_reg <= {{WIDTH*2-1{1'b0}}, 3'd3}; 
            e_reg_internal <= 3;
            y_reg <= {{WIDTH*2-1{1'b0}}, 1'b1}; 
            y_prev_reg <= {{WIDTH*2{1'b0}}};    
            state <= `UPDATING;
        end else begin
            case (state)
                `UPDATING: begin
                    if (b_reg != {{WIDTH*2{1'b0}}}) begin
                        a_reg <= b_reg;
                        b_reg <= remainder_from_mod;
                        y_prev_reg <= y_reg;
                        y_reg <= y_next_val;
                    end else begin
                        state <= `CHECK;
                    end
                end
                `CHECK: begin
                    if (a_reg == {{WIDTH*2-1{1'b0}},1'b1} && y_prev_reg[WIDTH*2-1] == 1'b0) begin 
                        state <= `HOLDING;
                    end else begin
                        a_reg <= totient_reg;
                        e_reg_internal <= e_plus_2_val;
                        b_reg <= {{WIDTH{1'b0}}, e_plus_2_val};
                        y_reg <= {{WIDTH*2-1{1'b0}}, 1'b1};
                        y_prev_reg <= {{WIDTH*2{1'b0}}};
                        state <= `UPDATING;
                    end
                end
                `HOLDING: begin
                    // Gi? tr?ng thái
                end
            endcase
        end
    end
endmodule


//======================================================================
// Module: control (Module chính ?i?u khi?n)
//======================================================================
module control #(
    parameter WIDTH = 32 
) (
    input [WIDTH-1:0] p, q,
    input clk,
    input reset,            
    input reset1,           
    input encrypt_decrypt,
    input [WIDTH-1:0] msg_in,
    output [WIDTH*2-1:0] msg_out,
    output mod_exp_finish
);

    wire inverter_finish_internal;
    wire [WIDTH*2-1:0] e_key, d_key;
    wire [WIDTH*2-1:0] current_exponent = encrypt_decrypt ? e_key : d_key;
    wire [WIDTH*2-1:0] current_modulo = p * q;

    reg [WIDTH*2-1:0] exp_reg_for_modexp, msg_reg_for_modexp;
    reg [WIDTH*2-1:0] mod_reg_for_modexp;

    always @(posedge clk) begin
        exp_reg_for_modexp <= current_exponent;
        mod_reg_for_modexp <= current_modulo;
        msg_reg_for_modexp <= {{(WIDTH){1'b0}}, msg_in}; 
    end

    inverter #(
        .WIDTH(WIDTH)
    ) i_inst (
        .p(p),
        .q(q),
        .clk(clk),
        .reset(reset),
        .finish(inverter_finish_internal),
        .e(e_key),
        .d(d_key)
    );

    mod_exp #(
        .WIDTH(WIDTH)
    ) m_inst (
        .base(msg_reg_for_modexp),
        .modulo(mod_reg_for_modexp),
        .exponent(exp_reg_for_modexp),
        .clk(clk),
        .reset(reset1),
        .finish(mod_exp_finish),
        .result(msg_out)
    );
endmodule

//======================================================================
// File: testbench.v (N?i dung này b?t ??u t? ?ây n?u g?p file)
// QUAN TR?NG: Biên d?ch file này v?i c? SystemVerilog (ví d?: -sv trong ModelSim/Questa)
// do s? d?ng ki?u 'string' và m?t s? cú pháp SystemVerilog.
//======================================================================
// `timescale 1ns / 1ps // ?ã có ? ??u file n?u g?p chung
// `define WIDTH 256    // ?ã có ? ??u file n?u g?p chung

module tb_main;
    // Khai báo `define WIDTH ? ?ây n?u file testbench.v là riêng bi?t và ch?a có
    // Ho?c ??m b?o `define WIDTH 256 ? ph?m vi global tr??c khi module này ???c ??nh ngh?a
    // N?u `define WIDTH 256 ?ã có ? ??u file g?p, thì không c?n ? ?ây n?a.

    reg [`WIDTH-1:0] p,q; 
    reg clk,reset,reset1,encrypt_decrypt;
    reg [`WIDTH-1:0] msg_in; 
    wire [2*`WIDTH-1:0] msg_out; 
    wire mod_exp_finish;

    control #(.WIDTH(`WIDTH)) uut (
        .p(p),
        .q(q),
        .clk(clk),
        .reset(reset),
        .reset1(reset1),
        .encrypt_decrypt(encrypt_decrypt),
        .msg_in(msg_in),       
        .msg_out(msg_out),     
        .mod_exp_finish(mod_exp_finish)
    );

    reg [`WIDTH-1:0] test_messages_hex [0:9];
    string test_messages_ascii [0:9]; // C?n SystemVerilog
    integer j;

    task display_as_ascii;
        input [`WIDTH-1:0] data_val;
        input string prefix_string; // C?n SystemVerilog
        reg [7:0] char_byte;
        integer k;
        integer first_char_byte_idx;

    begin
        $write("%s (ASCII Attempt): \"", prefix_string); 

        first_char_byte_idx = -1;
        for (k = (`WIDTH/8 - 1); k >= 0; k = k - 1) begin
            if (data_val[(k*8 + 7) : (k*8)] != 0) begin
                first_char_byte_idx = k;
                break;
            end
        end

        if (first_char_byte_idx != -1) begin
            for (k = first_char_byte_idx; k >= 0; k = k - 1) begin
                 char_byte = data_val[(k*8 + 7) : (k*8)];
                 if (char_byte >= 8'h20 && char_byte <= 8'h7E) begin 
                    $write("%c", char_byte);
                 end else if (char_byte != 0) { 
                    $write("{%02h}", char_byte); 
                 } else { 
                    $write("<00>");
                 }
            end
        end else if (data_val == 0) { 
            $write("<all_zeros_or_empty>");
        end else begin 
             $write("<unable_to_parse_as_ascii>");
        end
        $display("\""); 
    end
    endtask

    task run_encrypt_decrypt_test;
        input [`WIDTH-1:0] original_msg_hex_val;
        input string         original_msg_ascii_val; // C?n SystemVerilog
        input integer        test_num;
        reg [2*`WIDTH-1:0]   encrypted_msg_out_temp; 

    begin
        $display("\n----------------------------------------------------------------------");
        $display("--- Test Case %0d: Encrypt then Decrypt ---", test_num);
        $display("Prime Numbers Used are:\n1.p=%d\n2.q=%d\n", uut.p, uut.q); 
        
        $display("Original Message (ASCII): \"%s\"", original_msg_ascii_val);
        $display("Original Message (Hex)  : %h", original_msg_hex_val);
        $display("Original Message (Bin)  : %b", original_msg_hex_val);
        $display("----------------------------------------------------------------------");

        $display("\n[Test Case %0d] Starting Encryption...", test_num);
        msg_in = original_msg_hex_val; 
        encrypt_decrypt = 1;           

        reset = 0; reset1 = 0; #10;
        reset = 1; #10; reset = 0; 
        #1000; 
        
        reset1 = 1; #10; reset1 = 0; 
        #2980; 

        encrypted_msg_out_temp = msg_out; 
        $display("Encrypted Message (Hex): %h", encrypted_msg_out_temp);
        $display("Encrypted Message (Bin): %b", encrypted_msg_out_temp);
        $display("Encrypted Message (ASCII): [Encrypted data is numerical, not typically viewable as meaningful text]");

        $display("\n[Test Case %0d] Starting Decryption...", test_num);
        if (|encrypted_msg_out_temp[2*`WIDTH-1:`WIDTH] != 0) begin 
            $display("[Test Case %0d] WARNING: Encrypted message's most significant %0d bits are non-zero.", test_num, `WIDTH);
            $display("                         Input to decryption (msg_in) will take the least significant %0d bits.", test_num, `WIDTH);
        end
        msg_in = encrypted_msg_out_temp[`WIDTH-1:0]; 
        encrypt_decrypt = 0;                         

        reset = 0; reset1 = 0; #10;
        reset = 1; #10; reset = 0; 
        #1000; 
        
        reset1 = 1; #10; reset1 = 0; 
        #2980; 

        $display("Decrypted Message (Hex): %h", msg_out); 
        $display("Decrypted Message (Bin): %b", msg_out);
        display_as_ascii(msg_out[`WIDTH-1:0], "Decrypted Message");
       
        if (msg_out[`WIDTH-1:0] == original_msg_hex_val && |msg_out[2*`WIDTH-1:`WIDTH] == 0) begin
            $display("\n[Test Case %0d] SUCCESS: Decrypted message matches original.", test_num);
        end else begin
            $display("\n[Test Case %0d] FAILURE: Decrypted message DOES NOT match original.", test_num);
            $display("Original (Hex)         : %h", original_msg_hex_val);
            $display("Decrypted (LSBs Hex)   : %h", msg_out[`WIDTH-1:0]);
            if (|msg_out[2*`WIDTH-1:`WIDTH] != 0) begin
                $display("Decrypted (MSBs Hex)   : %h", msg_out[2*`WIDTH-1:`WIDTH]);
            end
        end
        $display("--- End Test Case %0d ---", test_num);
    end
    endtask

    initial begin
        p = 256'hE24EF6A97A2C4F53D6A8C7B5E4F3A291; 
        q = 256'hD0A5C3B7E8F6A9D2C1B0E7F4A382C5B9; 
                                                
        test_messages_ascii[0] = "Hello RSA"; 
        test_messages_hex[0]   = 256'h48656c6c6f20525341;
        test_messages_ascii[1] = "Test 123!"; 
        test_messages_hex[1]   = 256'h546573742031323321;
        test_messages_ascii[2] = "<Hex Val: 012345ABCDEF01>"; 
        test_messages_hex[2]   = 256'h00012345ABCDEF01; 
        test_messages_ascii[3] = "<Hex Pattern AABB...>";
        test_messages_hex[3]   = 256'hAABBCCDDEEFFAABBCCDDEEFFAABBCCDDEEFFAABBCCDDEEFFAABBCCDDEEFF0011;
        test_messages_ascii[4] = "<All Zeros>";
        test_messages_hex[4]   = 256'h0;
        test_messages_ascii[5] = "<Max Val for 256b>"; 
        test_messages_hex[5]   = 256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;
        test_messages_ascii[6] = "Verilog Rocks!"; 
        test_messages_hex[6]   = 256'h566572696c6f6720526f636b7321;
        test_messages_ascii[7] = "<Hex CafeBabe Pattern>";
        test_messages_hex[7]   = 256'hCAFEBABECAFEBABECAFEBABECAFEBABECAFEBABECAFEBABECAFEBABECAFEBABE;
        test_messages_ascii[8] = "Short"; 
        test_messages_hex[8]   = 256'h53686F7274;
        test_messages_ascii[9] = "End Of Tests!"; 
        test_messages_hex[9]   = 256'h456E64204F6620546573747321;

        #10;
        $display("\n\nRSA %0d-BIT ENCRYPTION/DECRYPTION TESTBENCH\n", `WIDTH*2);
        $display("WIDTH parameter for p, q, msg_in (for control module) = %0d bits", `WIDTH);
        $display("msg_out (from control module) = %0d bits", `WIDTH*2);

        clk = 0;

        for (j = 0; j < 10; j = j + 1) begin
            run_encrypt_decrypt_test(test_messages_hex[j], test_messages_ascii[j], j + 1);
        end

        $display("\n\n--- ALL TESTS COMPLETED ---");
        #100;
        $finish;
    end

    always #5 clk = ~clk;

endmodule
